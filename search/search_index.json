{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the calculator project that is a toy module used in the Real Python tutorial Document Your Python Project with MkDocs . Its aim is to give you a framework to build your project documentation using Python, MkDocs, mkdocstrings , and mkdocs-material . Table Of Contents This documentation follows the best practice for project documentation as described by Daniele Procida in the documentation system . Tutorial How-To Guide Reference Explanation Project Overview Do math with your own functions. Modules exported by this package: calculations : Provides several sample math calculations. Acknowledgements I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free-of-charge.","title":"Calculation Docs"},{"location":"#table-of-contents","text":"This documentation follows the best practice for project documentation as described by Daniele Procida in the documentation system . Tutorial How-To Guide Reference Explanation","title":"Table Of Contents"},{"location":"#project-overview","text":"Do math with your own functions. Modules exported by this package: calculations : Provides several sample math calculations.","title":"Project Overview"},{"location":"#acknowledgements","text":"I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free-of-charge.","title":"Acknowledgements"},{"location":"explanation/","text":"This part of the project documentation focuses on a understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented. Note: Expand this section by considering the following points: give context and background on your library explain why you created it provide multiple examples and approaches of how to work with it help the reader make connections don't write instructions or technical descriptions here","title":"Explanation"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have with the help of the code provided in this project. How To Add Two Numbers? You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers and you'll always get a float as a result.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-add-two-numbers","text":"You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers and you'll always get a float as a result.","title":"How To Add Two Numbers?"},{"location":"reference/","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the calculator project code. Provides several sample math calculations. This script can be imported as a module and allows the user to make mathematical calculations. Examples: >>> from calculator import calculations >>> calculations . add ( 2 , 4 ) 6.0 >>> calculations . multiply ( 2.0 , 4.0 ) 8.0 >>> from calculator.calculations import divide >>> divide ( 4.0 , 2 ) 2.0 The module contains the following functions: add - returns the sum of two numbers subtract - returns the difference of two numbers multiply - returns the product of two numbers divide - returns the quotient of two numbers power - returns the base to the power of the exponent sqrt - returns the square root of a number add ( a , b ) Calculates the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a Union[float, int] first number required b Union[float, int] second number required Returns: Type Description float sum of the first and the second number Source code in calculator/calculations.py def add ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a: first number b: second number Returns: sum of the first and the second number \"\"\" return float ( a + b ) divide ( a , b ) Calculates the quotient of two numbers. Examples: >>> divide ( 4.0 , 2.0 ) 2.0 >>> divide ( 4 , 2 ) 2.0 >>> divide ( 4 , 0 ) Traceback ( most recent call last ): ... ZeroDivisionError : division by zero Parameters: Name Type Description Default a Union[float, int] dividend required b Union[float, int] divisor required Exceptions: Type Description ZeroDivisionError gets raised when the divisor is 0 Returns: Type Description float the quotient Source code in calculator/calculations.py def divide ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the quotient of two numbers. Examples: >>> divide(4.0, 2.0) 2.0 >>> divide(4, 2) 2.0 >>> divide(4, 0) Traceback (most recent call last): ... ZeroDivisionError: division by zero Args: a: dividend b: divisor Raises: ZeroDivisionError: gets raised when the divisor is `0` Returns: the quotient \"\"\" if b == 0 : raise ZeroDivisionError ( \"division by zero\" ) return float ( a / b ) multiply ( a , b ) Calculates the product of two numbers. Examples: >>> multiply ( 4.0 , 2.0 ) 8.0 >>> multiply ( 4 , 2 ) 8.0 Parameters: Name Type Description Default a Union[float, int] first number required b Union[float, int] second number required Returns: Type Description float the product of the two numbers Source code in calculator/calculations.py def multiply ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the product of two numbers. Examples: >>> multiply(4.0, 2.0) 8.0 >>> multiply(4, 2) 8.0 Args: a: first number b: second number Returns: the product of the two numbers \"\"\" return float ( a * b ) power ( base , exponent = 2.0 ) Calculates base to the power of exponent. Examples: >>> power ( 4.0 , 2.0 ) 16.0 >>> power ( 4 , 2 ) 16.0 >>> power ( 4 ) 16.0 Parameters: Name Type Description Default base Union[float, int] the base number required exponent Union[float, int] the exponent used 2.0 Returns: Type Description float the result of taking the base to the exponent Source code in calculator/calculations.py def power ( base : Union [ float , int ], exponent : Union [ float , int ] = 2.0 ) -> float : \"\"\"Calculates base to the power of exponent. Examples: >>> power(4.0, 2.0) 16.0 >>> power(4, 2) 16.0 >>> power(4) 16.0 Args: base: the base number exponent: the exponent used Returns: the result of taking the base to the exponent \"\"\" return float ( base ** exponent ) sqrt ( a ) Calculates the square root of a. Examples: >>> sqrt ( 4.0 ) 2.0 >>> sqrt ( 4 ) 2.0 Parameters: Name Type Description Default a Union[float, int] the number that you want to take the square root of required Exceptions: Type Description ValueError raises if a is below 0 Returns: Type Description float the square root of a Source code in calculator/calculations.py def sqrt ( a : Union [ float , int ]) -> float : \"\"\"Calculates the square root of a. Examples: >>> sqrt(4.0) 2.0 >>> sqrt(4) 2.0 Args: a: the number that you want to take the square root of Raises: ValueError: raises if `a` is below `0` Returns: the square root of `a` \"\"\" if a < 0 : raise ValueError ( \"math domain error\" ) return float ( a ** ( 1 / 2 )) subtract ( a , b ) Calculates the difference of two numbers. Examples: >>> subtract ( 4.0 , 2.0 ) 2.0 >>> subtract ( 4 , 2 ) 2.0 Parameters: Name Type Description Default a Union[float, int] minuend required b Union[float, int] subtrahend required Returns: Type Description float the difference between the minuend minus the subtrahend Source code in calculator/calculations.py def subtract ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the difference of two numbers. Examples: >>> subtract(4.0, 2.0) 2.0 >>> subtract(4, 2) 2.0 Args: a: minuend b: subtrahend Returns: the difference between the minuend minus the subtrahend \"\"\" return float ( a - b )","title":"Reference"},{"location":"reference/#calculator.calculations.add","text":"Calculates the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a Union[float, int] first number required b Union[float, int] second number required Returns: Type Description float sum of the first and the second number Source code in calculator/calculations.py def add ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a: first number b: second number Returns: sum of the first and the second number \"\"\" return float ( a + b )","title":"add()"},{"location":"reference/#calculator.calculations.divide","text":"Calculates the quotient of two numbers. Examples: >>> divide ( 4.0 , 2.0 ) 2.0 >>> divide ( 4 , 2 ) 2.0 >>> divide ( 4 , 0 ) Traceback ( most recent call last ): ... ZeroDivisionError : division by zero Parameters: Name Type Description Default a Union[float, int] dividend required b Union[float, int] divisor required Exceptions: Type Description ZeroDivisionError gets raised when the divisor is 0 Returns: Type Description float the quotient Source code in calculator/calculations.py def divide ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the quotient of two numbers. Examples: >>> divide(4.0, 2.0) 2.0 >>> divide(4, 2) 2.0 >>> divide(4, 0) Traceback (most recent call last): ... ZeroDivisionError: division by zero Args: a: dividend b: divisor Raises: ZeroDivisionError: gets raised when the divisor is `0` Returns: the quotient \"\"\" if b == 0 : raise ZeroDivisionError ( \"division by zero\" ) return float ( a / b )","title":"divide()"},{"location":"reference/#calculator.calculations.multiply","text":"Calculates the product of two numbers. Examples: >>> multiply ( 4.0 , 2.0 ) 8.0 >>> multiply ( 4 , 2 ) 8.0 Parameters: Name Type Description Default a Union[float, int] first number required b Union[float, int] second number required Returns: Type Description float the product of the two numbers Source code in calculator/calculations.py def multiply ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the product of two numbers. Examples: >>> multiply(4.0, 2.0) 8.0 >>> multiply(4, 2) 8.0 Args: a: first number b: second number Returns: the product of the two numbers \"\"\" return float ( a * b )","title":"multiply()"},{"location":"reference/#calculator.calculations.power","text":"Calculates base to the power of exponent. Examples: >>> power ( 4.0 , 2.0 ) 16.0 >>> power ( 4 , 2 ) 16.0 >>> power ( 4 ) 16.0 Parameters: Name Type Description Default base Union[float, int] the base number required exponent Union[float, int] the exponent used 2.0 Returns: Type Description float the result of taking the base to the exponent Source code in calculator/calculations.py def power ( base : Union [ float , int ], exponent : Union [ float , int ] = 2.0 ) -> float : \"\"\"Calculates base to the power of exponent. Examples: >>> power(4.0, 2.0) 16.0 >>> power(4, 2) 16.0 >>> power(4) 16.0 Args: base: the base number exponent: the exponent used Returns: the result of taking the base to the exponent \"\"\" return float ( base ** exponent )","title":"power()"},{"location":"reference/#calculator.calculations.sqrt","text":"Calculates the square root of a. Examples: >>> sqrt ( 4.0 ) 2.0 >>> sqrt ( 4 ) 2.0 Parameters: Name Type Description Default a Union[float, int] the number that you want to take the square root of required Exceptions: Type Description ValueError raises if a is below 0 Returns: Type Description float the square root of a Source code in calculator/calculations.py def sqrt ( a : Union [ float , int ]) -> float : \"\"\"Calculates the square root of a. Examples: >>> sqrt(4.0) 2.0 >>> sqrt(4) 2.0 Args: a: the number that you want to take the square root of Raises: ValueError: raises if `a` is below `0` Returns: the square root of `a` \"\"\" if a < 0 : raise ValueError ( \"math domain error\" ) return float ( a ** ( 1 / 2 ))","title":"sqrt()"},{"location":"reference/#calculator.calculations.subtract","text":"Calculates the difference of two numbers. Examples: >>> subtract ( 4.0 , 2.0 ) 2.0 >>> subtract ( 4 , 2 ) 2.0 Parameters: Name Type Description Default a Union[float, int] minuend required b Union[float, int] subtrahend required Returns: Type Description float the difference between the minuend minus the subtrahend Source code in calculator/calculations.py def subtract ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Calculates the difference of two numbers. Examples: >>> subtract(4.0, 2.0) 2.0 >>> subtract(4, 2) 2.0 Args: a: minuend b: subtrahend Returns: the difference between the minuend minus the subtrahend \"\"\" return float ( a - b )","title":"subtract()"},{"location":"tutorials/","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project. Note: Expand this section by considering the following points: help newcomers to get started teach readers about your library by getting them to write code inspire confidence through examples that work for everyone, repeatably give readers an immediate sense of achievement show concrete examples, no abstractions provided the minimum necessary explanation avoid any distractions","title":"Tutorials"}]}